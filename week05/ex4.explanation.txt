Similar to ex3, a program's execution time gets shorter as more threads are added.

The increase in speed is as follows: 
1 thread: 7.213s
2 threads: 3.114s   (decrease in 2.316 times)
4 threads: 2.535s   (decrease in 1.228 times)
10 threads: 2.865s  (decrease in 0.885 times)
100 threads: 2.843s (decrease in 1.007 times)

We can observe that an increase in thread count does not always result in an increase in execution time.
It indicates that there isn't real parallelism and that the mutex technique isn't very effective.
There reason behind this is that some time is required to switch between threads and locking and unlocking mutex apparently also requires some time.
Comparing the results to those from ex3 reveals that performance suffered a little bit but remained around the same since the work is not as "parallel" as it was in Ex3 because the thread is designed to just check one number at a time to see if the mutex is blocked.
Additionally, because of the sluggish mutex blocking mechanism, blocking n times slows down the procedure. 